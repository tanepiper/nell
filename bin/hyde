#!/usr/bin/env node
'use strict';

var program = require('commander');
var config = require(__dirname + '/../package.json');

program
  .version(config.version)
  .option('-g --generate', 'Generate a static site output')
  .option('-i --init [name]', 'Create a new static site source folder [hyde-site]')
  .option('-w --preview [port]', 'Preview the static site [4000]', parseInt)
  .option('-n --newpost [name]', 'Generate a new post')
  .option('-p --newpage [name]', 'Generate a new page')
  .parse(process.argv);

var generate = function() {
  var current_path = process.cwd();
  var config;
  try {
    config = require(current_path + '/hyde.json');
  } catch(e) {
     process.stderr.write('Unable to load hyde.json config file');
     return;
  }
  
  require(__dirname + '/../lib/generate')(current_path, config, function(err) {
    if (err) {
      process.stderr.write(err.message);
    } else {
      process.stdout.write('Site "' + config.site.title + '" generated in ' + current_path);
    }
  });
};

var preview = function() {
  var current_path = process.cwd();
  require(__dirname + '/../lib/preview')(current_path + '/output', program.preview);
};

var newsite = function() {
  var name = program.init;
  var current_path = process.cwd();

  require(__dirname + '/../lib/newsite')(current_path, name, {}, function(err) {
    if (err) {
      process.stderr.write(err.message);
    } else {
      process.stdout.write('Site ' + name + ' created in ' + current_path);
    }
  });
};

var newitem = function() {
  var options;
  var current_path = process.cwd();

  if (program.newpost && typeof program.newpost === 'string') {
    options = {
      name: program.newpost,
      layout: 'post'
    };
  } else if (program.newpage && typeof program.newpage === 'string') {
    options = {
      name: program.newpage,
      layout: 'page'
    };
  } else {
    process.stderr.write('Pass a title for your new post');
    return;
  }

  require(__dirname + '/../lib/newitem')(current_path, options, function(err) {
    if (err) {
      process.stderr.write(err.message);
    } else {
      process.stdout.write('' + options.layout + ' ' + options.name + ' created in ' + current_path);
    }
  });
};

if (program.generate) { generate(); }
else if (program.preview)  { preview();  }
else if (program.init)  { newsite();  }
else if (program.newpost || program.newpage)  { newitem(); }
else { generate(); }